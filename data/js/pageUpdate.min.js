var socket;
var hasAlreadyRun = false;
var receivedTimeout;
var connectionAttempts = 0;
var espDateTime = 0;
var espDateTimeout;

function connectSocket()
{
  // Create a new WebSocket.
  if(socket != null)
      disconnect();
  
  connectionAttempts++;
  socket = new WebSocket('ws://'+location.hostname+':81');
  socket.onerror   = onSocketError;
  socket.onmessage = onSocketMessage;
  socket.onopen    = onSocketOpen;
  socket.onclose   = disconnect;
}

function disconnect()
{
    $('#serverStatus').children().addClass('server_disconnected').removeClass('server_connected');
    
    if (socket != null)
    {
      socket.onclose   = function() {};
      socket.onopen    = null
      socket.onmessage = null;
      socket.close();
      socket = null;
      clearTimeout(espDateTimeout);
      clearTimeout(receivedTimeout);
    }
    
    if (connectionAttempts <= 5)
      connectSocket();
    else 
      console.log("Unable to connect to device. Aborting...");
    //  ESP isn't working properly, stop hammering it with connection attempts
}

// Handle any errors that occur.
function onSocketError(error) 
{
    $('#serverStatus').children().addClass('server_disconnected').removeClass('server_connected');
    setTimeout(disconnect, 5000);
};

// Show a connected message when the WebSocket is opened.
function onSocketOpen(event) 
{
  $('#serverStatus').children().addClass('server_connected').removeClass('server_disconnected');
  connectionAttempts = 0;
  espDateTime = 0;
  clearTimeout(espDateTimeout);
  receivedTimeout = setTimeout(500, disconnect);
};

// Handle messages sent by the server.
function onSocketMessage(event)
{
    clearTimeout(receivedTimeout);
    
    var myObj = JSON.parse(event.data);
    
    //result from a command
    if(myObj.hasOwnProperty('command'))
    {
      var command = myObj.command;
      if(command.length == 1)
      {
          var result = myObj.result;
          switch(command)
          {
            case 'c': {
                        $('#commitResult').removeClass();
                        break;
                      }
            case 'd': {
                        $('#discardResult').removeClass();
                        break;
                      }
            case 'u': {
                        $('#updateResult').removeClass();
                        break;
                      }
            case 'r': {
                        $('#rebootResult').removeClass();
                        $('#rebootResult').addClass('glyphicon').addClass('glyphicon-off');
                        
                        socket.close();
                        $('#serverStatus').children().addClass('server_disconnected').removeClass('server_connected');
                        
                        setTimeout(10000, disconnect);
                        break;
                      }
            case 'f': {
                        $('#resetResult').removeClass();
                        break;
                      }
            case 'p': {
                        console.log(result);
                        break;
                      }
            case 'z': {
                        alert("SPIFFS has been formatted.")
                        break;
                      }
            case 't': {
                        espDateTime = new Date(result * 1000);
                        setInterval(espTimerTick, 1000);
                        break;
                      }
            default: { }
          }
          return;
      }
      else
      {
        // set the status for the result
        $('#'+command+'Spinner').removeClass();
        return;
      }
    }
    //sectional save return
    else if(myObj.hasOwnProperty('section'))
    {
      var command = myObj.command;
      
      var result = myObj.result;
      return;
    }
    else if (myObj.hasOwnProperty('device'))
    {
       if(myObj.device.version)  $('#version').html(myObj.device.version);
       if(myObj.device.sversion) $('#sversion').html(myObj.device.sversion);
       if(myObj.device.chip)     $('#chip').html(myObj.device.chip);
       if(myObj.device.cpu)      $('#cpu').html(myObj.device.cpu + " Mhz");

       if(myObj.device.uptime)
       {
           var sec_num = parseInt(myObj.device.uptime, 10);
           var days   = Math.floor(sec_num / 86400) % 24;
           var hours   = Math.floor(sec_num / 3600) % 24;
           var minutes = Math.floor(sec_num / 60) % 60;
           var seconds = sec_num % 60;
           
           var uptimeStr = (days > 0 ? days + " days, " : "") +
                           ((days > 0) || (hours > 0) ? hours + " hours, " : "") +
                           ((days > 0) || (hours > 0) || (minutes > 0) ? minutes + " mins, " : "") +
                           seconds + " secs";
           
           $('#uptime').html(uptimeStr);
       }
		
       if(myObj.device.status) $('#status').html(myObj.device.status);
       if(myObj.device.effect) $('#effect').html(myObj.device.effect);
       if(myObj.device.temp)   $('#temp').html(myObj.device.temp);
       
       if(myObj.device.ssid) $('#ssid').html(myObj.device.ssid);
       if(myObj.device.ip)   $('#ip').html(myObj.device.ip);
       if(myObj.device.mac)  $('#mac').html(myObj.device.mac);
        
       if(myObj.device.heap)
       {
         var heapSize = (myObj.device.heap * 100) / 40960;
         $('#heap').html(myObj.device.heap + " Bytes");
         $('#heap').css('width', heapSize + "%");
         if (heapSize < 40)
          $('#heap').removeClass().addClass('progress-bar-danger');
         else if (heapSize < 50)
          $('#heap').removeClass().addClass('progress-bar-warning');
         else if (heapSize < 60)
          $('#heap').removeClass().addClass('progress-bar-info');
         else 
          $('#heap').removeClass().addClass('progress-bar-success');
       }
       $('#heap').addClass('progress-bar');
       
       if(myObj.device.flash && myObj.device.flashsize)
       {
         var flashSize = (myObj.device.flash * 100) / myObj.device.flashsize + "%";
         
         $('#flash').html(myObj.device.flash + " Bytes");
         $('#flash').css('width', flashSize);
         
         if (flashSize < 40)
          $('#flash').removeClass().addClass('progress-bar-danger');
         else if (flashSize < 50)
          $('#flash').removeClass().addClass('progress-bar-warning');
         else if (flashSize < 60)
          $('#flash').removeClass().addClass('progress-bar-info');
         else 
          $('#flash').removeClass().addClass('progress-bar-success');
       }
       $('#flash').addClass('progress-bar');
       
       if(myObj.device.spiffs && myObj.device.sspiffsize)
       {
           $('#spiffs').html(myObj.device.spiffs + " Bytes");
           $('#spiffs').css('width', (myObj.device.spiffs * 100) / myObj.device.sspiffsize + "%");
       }
       // End Device Info
    }
    else if (myObj.hasOwnProperty('general'))
    {
       // Begin General Settings
       if(myObj.general.hostname) $('#hostname').val(myObj.general.hostname);
       if(myObj.general.hasOwnProperty('restart')) $('#autorestart').val(myObj.general.restart);
       // End General Info
    }
    else if (myObj.hasOwnProperty('ota'))
    {
       // Begin OTA Settings
       if(myObj.ota.updateURL) $('#updateURL').val(myObj.ota.updateURL);
       if(myObj.ota.hasOwnProperty('updateinterval')) $('#updateinterval').val(myObj.ota.updateinterval);
       // End OTA Info
    }
    else if (myObj.hasOwnProperty('network'))
    {
       // Begin Network Settings
       if(myObj.network.ssid) $('#wifiSSID').val(myObj.network.ssid);
       if(myObj.network.pass) $('#wifipass').val(myObj.network.pass);
       if(myObj.network.apmode)
         $('#wmodeap').prop("checked", true);
       else
         $('#wmodesta').prop("checked", true);
       // End Network Info
    }
    else if (myObj.hasOwnProperty('mqtt'))
    {
       // Begin MQTT Settings
       if(myObj.mqtt.host)  $('#mqtthost').val(myObj.mqtt.host);
       if(myObj.mqtt.port)  $('#mqttport').val(myObj.mqtt.port);
       if(myObj.mqtt.user)  $('#mqttuser').val(myObj.mqtt.user);
       if(myObj.mqtt.pass)  $('#mqttpwd').val(myObj.mqtt.pass);
       if(myObj.mqtt.auth)  $("#mqttauth").prop("checked", myObj.mqtt.auth);
       if(myObj.mqtt.cID)   $('#mqttcid').val(myObj.mqtt.cID);
       if(myObj.mqtt.state) $('#mqttstate').val(myObj.mqtt.state);
       if(myObj.mqtt.set)   $('#mqttset').val(myObj.mqtt.set);
       if(myObj.mqtt.temp)  $('#mqtttemp').val(myObj.mqtt.temp);
       if(myObj.mqtt.will)  $('#mqttwill').val(myObj.mqtt.will);
       // End MQTT Info
    }
    else if (myObj.hasOwnProperty('ntp'))
    {
       //update the device NTP time -- will be off by the network lag
       if(myObj.ntp.time)
       {
           //deviceTime(Date.parse());
           espDateTime = new Date(myObj.ntp.time * 1000);
           setInterval(espTimerTick, 1000);
       }
       
       // Begin NTP Settings
       if(myObj.ntp.host)   $('#ntpserver').val(myObj.ntp.host);
       if(myObj.ntp.tz)     $('#timezone').val(myObj.ntp.tz);
       // End NTP Info
    }
    else if (myObj.hasOwnProperty('transitions'))
    {
       // Begin transitions Settings
       if(myObj.transitions.rainbow)
       {
         $('#rainbowspeed').val(myObj.transitions.rainbow);
         $('#rainbowspeed').trigger("oninput"); 
       }
       if(myObj.transitions.fade)
       {
         $('#fadespeed').val(myObj.transitions.fade); 
         $('#fadespeed').trigger("oninput");
       }
       if(myObj.transitions.randfade) 
       {
         $('#rfadespeed').val(myObj.transitions.randfade);
         $('#rfadespeed').trigger("oninput");
       }
       if(myObj.transitions.numflashes) $('#numflashes').val(myObj.transitions.numflashes);
       if(myObj.transitions.flashlength)
       { 
         $('#flashspeed').val(myObj.transitions.flashlength); 
         $('#flashspeed').trigger("oninput");
       }
       // End transitions Info
    }
    else
    {
        console.log(event.data);
    }
    receivedTimeout = setTimeout(500, disconnect);
};

function espTimerTick()
{
    if (espDateTime != 0)
    {
        espDateTime.setSeconds(espDateTime.getSeconds() + 1);
        document.getElementById("utc").innerHTML = espDateTime.toUTCString().slice(0, -3);
    }
    else
    {
        var json = {};
        json.command = "t";
        socket.send(JSON.stringify(json));
        
        clearTimeout(espDateTimeout);  //clear the timeout so don't re-request
    }
}

function saveTransitions()
{
  $('#transitionsSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.transitions = {};
    json.transitions.rainbow = $('#rainbowspeed').val();
    json.transitions.fade = $('#fadespeed').val();
    json.transitions.randfade = $('#rfadespeed').val();
    json.transitions.numflashes = $('#numflashes').val();
    json.transitions.flashlength = $('#flashspeed').val();
  socket.send(JSON.stringify(json));
}

function saveGeneral()
{
  $('#generalSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.general = {};
    json.general.hostname = $('#hostname').val();
    json.general.restart = $('#autorestart').val();
  socket.send(JSON.stringify(json));
}

function saveUpdate()
{
  $('#otaSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.ota = {};
    json.ota.updateURL = $('#updateURL').val();
    json.ota.updateinterval = $('#updateinterval').val();
  socket.send(JSON.stringify(json));
}

function saveNetwork()
{
  $('#networkSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.network = {};
    json.network.ssid   = $('#wifiSSID').val();
    json.network.pass   = $('#wifipass').val();
    json.network.apmode = $('#wmodeap').prop("checked");
  socket.send(JSON.stringify(json));
}

function saveMQTT()
{
  $('#mqttSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.mqtt = {};
    json.mqtt.cID   = $('#mqttcid').val();
    json.mqtt.host  = $('#mqtthost').val();
    json.mqtt.port  = $('#mqttport').val();
    json.mqtt.user  = $('#mqttuser').val();
    json.mqtt.pass  = $('#mqttpwd').val();
    json.mqtt.auth  = $("#mqttauth").prop("checked");
    json.mqtt.state = $('#mqttstate').val();
    json.mqtt.set   = $('#mqttset').val();
    json.mqtt.temp  = $('#mqtttemp').val();
    json.mqtt.will  = $('#mqttwill').val();
  socket.send(JSON.stringify(json));
}

function saveNTP()
{
  $('#ntpSpinner').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.ntp = {};
    json.ntp.host = $('#ntpserver').val();
    json.ntp.timezone = $('#timezone').val();
  socket.send(JSON.stringify(json));
}

function updateDevice()
{
  $('#updateResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "u";
  socket.send(JSON.stringify(json));
}

function reloadConfig()
{
  $('#discardResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "d";
  socket.send(JSON.stringify(json));
}

function commitConfigSaves()
{
  $('#commitResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "c";
  socket.send(JSON.stringify(json));
}

function rebootDevice()
{
  $('#rebootResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "r";
  socket.send(JSON.stringify(json));
}

function factoryReset()
{
  $('#resetResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "f";
  socket.send(JSON.stringify(json));
}

function eraseSPIFFS()
{
  $('#resetResult').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
  var json = {};
    json.command = "z";
  socket.send(JSON.stringify(json));
}

function browserTime()
{
  var d = new Date(0);
  var c = new Date();
  var timestamp = Math.floor((c.getTime() / 1000) + ((c.getTimezoneOffset() * 60) * -1));
  d.setUTCSeconds(timestamp);
  document.getElementById("rtc").innerHTML = d.toUTCString().slice(0, -3);
}

$(document).ready(function () 
{
  $("#sidebar").mCustomScrollbar( { theme: "minimal" });

  $('#sidebarCollapse, #dismiss').on('click', function () 
  {
    $('#sidebar').toggleClass('active');
  });
  
  $('.menuItem').on('click', function () 
  {
    $('.cPage:not(' + $(this).attr('page') + ')').hide((function(caller) { $(caller.attr('page')).fadeIn() })($(this)));
  });

  $('#upload_form').submit(function(e) 
  {
    e.preventDefault();
    $('#updateSpin').addClass('glyphicon').addClass('fa-spinner').addClass('fa-spin');
    
    if (socket.readyState == socket.CONNECTING || socket.readyState == socket.OPEN)
    {
      socket.onclose = null;
      socket.close();
      $('#serverStatus').children().addClass('server_disconnected').removeClass('server_connected');
    }
    
    var formData = new FormData($('#upload_form')[0]);
    formData.append('file', $('#upload_form [type="file"')[0].files[0]);
    
    console.log("Updating");
    console.log("Filename: " + $('#upload_form [type="file"')[0].files[0]);
    
    $("#upload_form").prop("disabled", true);
    
    $.ajax( {
      url : "/update",
      type : 'POST',
      data : formData,
      cache : false,
      contentType : false,
      processData : false,
      xhr: function(){
        var xhr = $.ajaxSettings.xhr() ;

        xhr.upload.onprogress = function(event) {
        //Set onprogress event handler
          var perc = Math.round((event.loaded / event.total) * 100);
          $('#updPrg').text(perc + '%');
        };
        
        xhr.upload.onload = function(event) {
          //success
          $('#updateSpin').removeClass();
          $("#upload_form").prop("disabled", true);
          $("#upload_form")[0].reset();
          $('#updPrg').text('');
          $('#updMsg').text("Upload successful. Page will reload in 15 seconds.");
          
          setTimeout(15000, location.reload());
        };
        
        xhr.upload.onerror = function(event) {
          //error
          //display error (if possible)
          $("#upload_form")[0].reset()
          $('#updateSpin').removeClass();
          $("#upload_form").prop("disabled", false);
          $('#updMsg').text("Error while uploading.");
          disconnect();
        };

        return xhr ;
      }
    });
  });
  
  setInterval(browserTime, 500);
  setTimeout(disconnect, 500);
});

/**
{
   "device":{
      "status":"Off",
      "temp":-127,
      "heap":31504,
      "chip":"fe4ef7",
      "cpu":80,
      "flash":2789376,
      "flashsize":4194304,
      "spiffs":956310,
      "sspiffsize":957314,
      "ssid":"kcender2.4",
      "mac":"18:FE:34:FE:4E:F7",
      "effect":"None",
      "ip":"192.168.1.32"
   },
   "general":{
      "hostname":"MQTT_RGB_LED",
      "restart":0,
      "updateinterval":0,
      "updateURL":""
   },
   "network":{
      "ssid":"kcender2.4",
      "pass":"iloveitsumi",
      "apmode":false
   },
   "mqtt":{
      "host":"192.168.1.2",
      "port":1883,
      "user":"couch_lights",
      "pass":"lettherebelight",
      "cID":"fe4ef7",
      "state":"devices/lights/couch/rgb",
      "set":"devices/lights/couch/set",
      "temp":"devices/lights/couch/temp"
   },
   "ntp":{
      "host":"ap.pool.ntp.org",
      "tz":9,
      "uptime":"0 days, 0 hours, 5 mins, 8 secs"
   },
   "transitions":{
      "rainbow":30,
      "fade":30,
      "randfade":30,
      "numflashes":3,
      "flashlength":500
   }
}
*/